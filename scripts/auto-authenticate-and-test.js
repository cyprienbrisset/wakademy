#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üöÄ Script d\'authentification automatique et test d\'upload');
console.log('========================================================\n');

// Cr√©er un fichier de test
const testFileName = 'temp-auto-test.txt';
const testContent = `Test d'upload automatique apr√®s authentification
Cr√©√© le: ${new Date().toISOString()}
Utilisateur: Auto Test
Description: Test automatis√© de l'upload avec authentification`;

fs.writeFileSync(testFileName, testContent);
console.log(`‚úÖ Fichier de test cr√©√©: ${testFileName}`);

// Script pour authentifier automatiquement dans le navigateur
const authScript = `
// Script d'authentification automatique pour Wakademy
console.log('üîê Authentification automatique en cours...');

// Cr√©er un utilisateur de test
const testUser = {
  id: "test-user-" + Date.now(),
  email: "test@example.com", 
  name: "Utilisateur Test Auto",
  firstName: "Utilisateur",
  lastName: "Test",
  isAuthenticated: true,
  role: "admin"
};

// Sauvegarder dans localStorage
localStorage.setItem("wakademy_admin", JSON.stringify(testUser));

console.log('‚úÖ Utilisateur de test cr√©√©:', testUser);
console.log('üîÑ Rechargement de la page...');

// Recharger la page
window.location.reload();
`;

// Sauvegarder le script dans un fichier
fs.writeFileSync('scripts/browser-auth-script.js', authScript);

console.log('\nüìã Instructions automatis√©es:');
console.log('=============================');

console.log('\n1. üåê Allez sur: http://localhost:3000/upload');

console.log('\n2. üîß Ouvrez la console du navigateur (F12)');

console.log('\n3. üìã Copiez et collez ce script:');
console.log('```javascript');
console.log(authScript.trim());
console.log('```');

console.log('\n4. ‚èé Appuyez sur Entr√©e pour ex√©cuter');

console.log('\n5. ‚úÖ La page se rechargera et vous serez authentifi√©');

console.log('\n6. üéØ Testez l\'upload avec le fichier cr√©√©');

console.log('\nüìÅ Fichiers cr√©√©s:');
console.log(`- Fichier de test: ${path.resolve(testFileName)}`);
console.log(`- Script d'auth: ${path.resolve('scripts/browser-auth-script.js')}`);

console.log('\nüéØ R√©sum√© du probl√®me et solution:');
console.log('=================================');
console.log('‚ùå PROBL√àME: Les boutons d\'upload sont d√©sactiv√©s');
console.log('üîç CAUSE: Utilisateur non authentifi√© (isUserAuthenticated = false)');
console.log('‚úÖ SOLUTION: Cr√©er un utilisateur de test dans localStorage');
console.log('üöÄ R√âSULTAT: Boutons activ√©s et upload fonctionnel');

console.log('\nüí° Explication technique:');
console.log('========================');
console.log('- L\'API d\'upload fonctionne parfaitement (test√© pr√©c√©demment)');
console.log('- Le composant ContentUploadForm v√©rifie isAuthenticated()');
console.log('- Cette fonction lit localStorage["wakademy_admin"]');
console.log('- Sans utilisateur authentifi√©, les boutons sont disabled');
console.log('- Le script ci-dessus cr√©e un utilisateur de test valide');

console.log('\nüîß Alternative manuelle:');
console.log('=======================');
console.log('Sur la page /upload, cliquez sur le bouton jaune:');
console.log('"Cr√©er un utilisateur de test"');

// Nettoyer apr√®s 10 secondes
setTimeout(() => {
  try {
    fs.unlinkSync(testFileName);
    console.log(`\nüßπ Fichier de test supprim√©: ${testFileName}`);
  } catch (error) {
    console.log(`\n‚ö†Ô∏è  Impossible de supprimer ${testFileName}`);
  }
}, 10000); 