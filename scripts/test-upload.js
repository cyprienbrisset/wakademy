const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

// Configuration avec cl√© de service
const SUPABASE_URL = 'http://supabasekong-ggcg8sgo4kwow8sk80004gkg.37.187.144.121.sslip.io';
const SUPABASE_SERVICE_KEY = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzdXBhYmFzZSIsImlhdCI6MTc0NzQxMDcyMCwiZXhwIjo0OTAzMDg0MzIwLCJyb2xlIjoic2VydmljZV9yb2xlIn0.pg0RRnBzt13kxHejjt81ARzZaJlZIuB3DcejPIbFlus';

async function testUpload() {
  console.log('üß™ Test d\'upload de fichier...');
  
  try {
    const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

    // Cr√©er un fichier de test simple
    const testContent = 'Ceci est un fichier de test pour Wakademy';
    const testFileName = 'test-upload.txt';
    const testFilePath = `test/${Date.now()}-${testFileName}`;

    console.log('üìÑ Cr√©ation d\'un fichier de test...');
    
    // Convertir le contenu en Blob pour simuler un fichier
    const testFile = new Blob([testContent], { type: 'text/plain' });

    // Tester l'upload
    console.log('üì§ Test d\'upload vers le bucket content...');
    const { data: uploadData, error: uploadError } = await supabase.storage
      .from('content')
      .upload(testFilePath, testFile, {
        cacheControl: '3600',
        upsert: false,
      });

    if (uploadError) {
      console.error('‚ùå Erreur d\'upload:', uploadError);
      return;
    }

    console.log('‚úÖ Upload r√©ussi !');
    console.log('üìä Donn√©es d\'upload:', uploadData);

    // Tester la g√©n√©ration d'URL publique
    console.log('üîó Test de g√©n√©ration d\'URL publique...');
    const { data: publicUrlData } = supabase.storage
      .from('content')
      .getPublicUrl(testFilePath);

    console.log('‚úÖ URL publique g√©n√©r√©e:', publicUrlData.publicUrl);

    // Tester la g√©n√©ration d'URL sign√©e
    console.log('üîê Test de g√©n√©ration d\'URL sign√©e...');
    const { data: signedUrlData, error: signedUrlError } = await supabase.storage
      .from('content')
      .createSignedUrl(testFilePath, 3600);

    if (signedUrlError) {
      console.error('‚ùå Erreur URL sign√©e:', signedUrlError);
    } else {
      console.log('‚úÖ URL sign√©e g√©n√©r√©e:', signedUrlData.signedUrl);
    }

    // Nettoyer le fichier de test
    console.log('üóëÔ∏è Nettoyage du fichier de test...');
    const { error: deleteError } = await supabase.storage
      .from('content')
      .remove([testFilePath]);

    if (deleteError) {
      console.warn('‚ö†Ô∏è Erreur lors du nettoyage:', deleteError);
    } else {
      console.log('‚úÖ Fichier de test supprim√©');
    }

  } catch (error) {
    console.error('‚ùå Erreur fatale:', error);
  }
}

testUpload(); 