const { execSync } = require('child_process');

console.log('üîß Test de la correction des event handlers...\n');

const tests = [
  {
    name: 'Page de podcast (HTML)',
    url: 'http://localhost:3000/content/73c7e91c-e967-4ad1-8298-0bfa3289486b',
    expected: 'AudioPlayerWrapper',
    description: 'V√©rification que AudioPlayerWrapper est utilis√©'
  },
  {
    name: 'Page de podcast (Titre)',
    url: 'http://localhost:3000/content/73c7e91c-e967-4ad1-8298-0bfa3289486b',
    expected: 'Podcast Innovation Tech',
    description: 'V√©rification que le contenu s\'affiche'
  },
  {
    name: 'Page de podcast (Lecteur audio)',
    url: 'http://localhost:3000/content/73c7e91c-e967-4ad1-8298-0bfa3289486b',
    expected: 'TechTalk Radio',
    description: 'V√©rification que le lecteur audio s\'affiche'
  },
  {
    name: 'Page de m√©ditation (Podcast)',
    url: 'http://localhost:3000/content/3b7e418c-0a95-41e4-b554-7fe531dbc662',
    expected: 'M√©ditation Sons de la Nature',
    description: 'Test d\'un autre podcast'
  }
];

let passedTests = 0;
let totalTests = tests.length;

for (const test of tests) {
  try {
    console.log(`üß™ Test: ${test.name}`);
    console.log(`   ${test.description}`);
    
    const result = execSync(`curl -s "${test.url}"`, { encoding: 'utf8', timeout: 10000 });
    
    if (result.includes(test.expected)) {
      console.log(`‚úÖ ${test.name} - SUCC√àS`);
      passedTests++;
    } else {
      console.log(`‚ùå ${test.name} - √âCHEC`);
      console.log(`   Attendu: ${test.expected}`);
      console.log(`   Re√ßu: ${result.substring(0, 200)}...`);
    }
  } catch (error) {
    console.log(`‚ùå ${test.name} - ERREUR: ${error.message}`);
  }
  
  console.log('');
}

console.log(`üìä R√©sultats: ${passedTests}/${totalTests} tests r√©ussis`);

if (passedTests === totalTests) {
  console.log('üéâ Correction des event handlers r√©ussie !');
  console.log('‚úÖ AudioPlayerWrapper utilis√© au lieu d\'AudioPlayer direct');
  console.log('‚úÖ Pas d\'erreur "Event handlers cannot be passed to Client Component props"');
  console.log('‚úÖ Pages de podcast accessibles et fonctionnelles');
  console.log('‚úÖ Lecteur audio s\'affiche correctement');
} else {
  console.log('‚ö†Ô∏è Certains tests ont √©chou√©. V√©rifiez les erreurs ci-dessus.');
}

console.log('\nüí° Correction appliqu√©e:');
console.log('   - Cr√©ation du composant AudioPlayerWrapper (client)');
console.log('   - D√©placement des fonctions onProgress et onComplete dans le wrapper');
console.log('   - Utilisation d\'useCallback pour optimiser les performances');
console.log('   - Suppression des fonctions du composant serveur ContentPage');

console.log('\nüîß Fichiers modifi√©s:');
console.log('   - components/content/audio-player-wrapper.tsx (nouveau)');
console.log('   - app/(dashboard)/content/[id]/page.tsx (modifi√©)'); 