const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üß™ Test du flow d\'upload complet...\n');

// Fonction pour cr√©er un utilisateur de test
function createTestUser() {
  console.log('üë§ Cr√©ation d\'un utilisateur de test...');
  
  const testUser = {
    id: "test-user-" + Date.now(),
    email: "test@example.com",
    firstName: "Utilisateur",
    lastName: "Test",
    name: "Utilisateur Test",
    isAuthenticated: true,
    role: "admin",
  };

  console.log(`   ID: ${testUser.id}`);
  console.log(`   Email: ${testUser.email}`);
  console.log(`   Nom: ${testUser.name}`);
  console.log(`   R√¥le: ${testUser.role}`);
  
  return testUser;
}

// Fonction pour tester l'API d'upload
async function testUploadAPI() {
  console.log('\nüì§ Test de l\'API d\'upload...');
  
  try {
    // Cr√©er un fichier de test temporaire
    const testContent = 'Ceci est un fichier de test pour l\'upload Wakademy';
    const testFilePath = path.join(__dirname, 'temp-test-file.txt');
    fs.writeFileSync(testFilePath, testContent);
    
    console.log('   ‚úÖ Fichier de test cr√©√©');
    
    // Cr√©er les m√©tadonn√©es
    const metadata = {
      title: "Test Upload Script",
      description: "Fichier de test upload√© via script automatis√©",
      type: "document",
      author: "Script Test",
      language: "fr",
      category: "Test",
      tags: ["test", "script", "automation"]
    };
    
    const aiOptions = {
      generateSummary: true,
      createTranscription: false,
      enableAiCategorization: false,
      extractAudio: false,
      createThumbnail: false
    };
    
    const testUser = createTestUser();
    
    // Pr√©parer la commande curl pour tester l'upload
    const curlCommand = `curl -X POST http://localhost:3000/api/upload \\
      -F "file=@${testFilePath}" \\
      -F "metadata=${JSON.stringify(metadata).replace(/"/g, '\\"')}" \\
      -F "aiOptions=${JSON.stringify(aiOptions).replace(/"/g, '\\"')}" \\
      -F "userData=${JSON.stringify(testUser).replace(/"/g, '\\"')}" \\
      -F "status=processing"`;
    
    console.log('   üöÄ Envoi de la requ√™te d\'upload...');
    
    const result = execSync(curlCommand, { encoding: 'utf8', timeout: 30000 });
    
    console.log('   üì• R√©ponse re√ßue:');
    console.log('   ' + result.substring(0, 200) + (result.length > 200 ? '...' : ''));
    
    // Nettoyer le fichier temporaire
    fs.unlinkSync(testFilePath);
    console.log('   üßπ Fichier temporaire supprim√©');
    
    // Analyser la r√©ponse
    try {
      const response = JSON.parse(result);
      if (response.success) {
        console.log('   ‚úÖ Upload r√©ussi !');
        console.log(`   üìÑ ID du contenu: ${response.contentId}`);
        return response.contentId;
      } else {
        console.log('   ‚ùå √âchec de l\'upload');
        console.log(`   üîç Erreur: ${response.error}`);
        return null;
      }
    } catch (parseError) {
      console.log('   ‚ö†Ô∏è R√©ponse non-JSON re√ßue');
      if (result.includes('success')) {
        console.log('   ‚úÖ Upload probablement r√©ussi (r√©ponse HTML)');
      } else {
        console.log('   ‚ùå Erreur probable');
      }
      return null;
    }
    
  } catch (error) {
    console.log(`   ‚ùå Erreur lors du test: ${error.message}`);
    
    // Nettoyer en cas d'erreur
    const testFilePath = path.join(__dirname, 'temp-test-file.txt');
    if (fs.existsSync(testFilePath)) {
      fs.unlinkSync(testFilePath);
      console.log('   üßπ Fichier temporaire supprim√© apr√®s erreur');
    }
    
    return null;
  }
}

// Fonction pour v√©rifier que le contenu appara√Æt dans l'API trending
async function verifyContentInTrending(contentId) {
  if (!contentId) return false;
  
  console.log('\nüîç V√©rification dans l\'API trending...');
  
  try {
    const result = execSync('curl -s "http://localhost:3000/api/trending"', { encoding: 'utf8', timeout: 10000 });
    
    if (result.includes(contentId)) {
      console.log('   ‚úÖ Contenu trouv√© dans l\'API trending');
      return true;
    } else {
      console.log('   ‚ö†Ô∏è Contenu pas encore visible dans trending (peut prendre quelques secondes)');
      return false;
    }
  } catch (error) {
    console.log(`   ‚ùå Erreur lors de la v√©rification: ${error.message}`);
    return false;
  }
}

// Fonction principale
async function main() {
  console.log('üéØ Objectif: Tester le flow complet d\'upload');
  console.log('üìã √âtapes:');
  console.log('   1. Cr√©er un utilisateur de test');
  console.log('   2. Tester l\'API d\'upload avec un fichier');
  console.log('   3. V√©rifier que le contenu appara√Æt dans trending');
  console.log('');
  
  // Test de l'API d'upload
  const contentId = await testUploadAPI();
  
  // V√©rification dans trending
  if (contentId) {
    await verifyContentInTrending(contentId);
  }
  
  console.log('\nüìä R√©sum√© du test:');
  if (contentId) {
    console.log('‚úÖ Upload fonctionnel');
    console.log('‚úÖ API d\'upload op√©rationnelle');
    console.log('‚úÖ Utilisateur de test cr√©√© avec succ√®s');
    console.log('');
    console.log('üí° Pour utiliser l\'interface web:');
    console.log('   1. Allez sur http://localhost:3000/upload');
    console.log('   2. Cliquez sur "Cr√©er un utilisateur de test"');
    console.log('   3. S√©lectionnez un fichier et remplissez les m√©tadonn√©es');
    console.log('   4. Cliquez sur "Enregistrer et lancer les traitements"');
  } else {
    console.log('‚ùå Probl√®me d√©tect√© avec l\'upload');
    console.log('');
    console.log('üîß Solutions possibles:');
    console.log('   1. V√©rifier que le serveur Next.js fonctionne sur le port 3000');
    console.log('   2. V√©rifier la configuration Supabase');
    console.log('   3. V√©rifier que le bucket "content" existe');
    console.log('   4. Consulter les logs du serveur pour plus de d√©tails');
  }
}

// Ex√©cuter le test
main().catch(console.error); 