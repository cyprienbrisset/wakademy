const { createClient } = require('@supabase/supabase-js');
const { execSync } = require('child_process');

// Configuration avec cl√© de service
const SUPABASE_URL = 'http://supabasekong-ggcg8sgo4kwow8sk80004gkg.37.187.144.121.sslip.io';
const SUPABASE_SERVICE_KEY = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJzdXBhYmFzZSIsImlhdCI6MTc0NzQxMDcyMCwiZXhwIjo0OTAzMDg0MzIwLCJyb2xlIjoic2VydmljZV9yb2xlIn0.pg0RRnBzt13kxHejjt81ARzZaJlZIuB3DcejPIbFlus';

// Modes disponibles
const MODES = {
  'demo': {
    name: 'Mode D√©mo Pur',
    icon: 'üé¨',
    description: 'Contenus de d√©mo r√©alistes uniquement',
    scripts: ['reset-demo-mode.js']
  },
  'premium': {
    name: 'Mode D√©mo + Premium',
    icon: '‚≠ê',
    description: 'Contenus de d√©mo + contenus premium',
    scripts: ['reset-demo-mode.js', 'add-premium-demo-data.js']
  },
  'test': {
    name: 'Mode Test/D√©veloppement',
    icon: 'üß™',
    description: 'Contenus de test pour d√©veloppement',
    scripts: ['purge-contents.js all', 'add-test-data.js']
  },
  'full': {
    name: 'Mode Complet',
    icon: 'üéØ',
    description: 'Tous types de contenus (test + d√©mo + premium)',
    scripts: ['purge-contents.js all', 'add-test-data.js', 'add-real-demo-data.js', 'add-premium-demo-data.js']
  },
  'empty': {
    name: 'Base Vide',
    icon: 'üóëÔ∏è',
    description: 'Supprime tous les contenus',
    scripts: ['purge-contents.js all']
  }
};

function showUsage() {
  console.log('üîÑ Script de basculement de mode Wakademy\n');
  console.log('Usage: node scripts/switch-mode.js <mode>\n');
  console.log('Modes disponibles:');
  
  Object.entries(MODES).forEach(([key, mode]) => {
    console.log(`  ${mode.icon} ${key.padEnd(8)} - ${mode.name}`);
    console.log(`    ${mode.description}`);
    console.log('');
  });
  
  console.log('Exemples:');
  console.log('  node scripts/switch-mode.js demo     # Basculer en mode d√©mo');
  console.log('  node scripts/switch-mode.js premium  # Basculer en mode d√©mo + premium');
  console.log('  node scripts/switch-mode.js test     # Basculer en mode test');
  console.log('  node scripts/switch-mode.js empty    # Vider la base');
}

function executeScript(scriptCommand) {
  console.log(`\nüîÑ Ex√©cution: ${scriptCommand}`);
  try {
    const output = execSync(`node scripts/${scriptCommand}`, { 
      encoding: 'utf8',
      stdio: 'pipe'
    });
    
    // Afficher seulement les lignes importantes (avec √©mojis)
    const lines = output.split('\n');
    const importantLines = lines.filter(line => 
      line.includes('üéâ') || 
      line.includes('‚úÖ') || 
      line.includes('üìä') || 
      line.includes('üí°') ||
      line.includes('‚≠ê') ||
      line.includes('üé¨') ||
      line.includes('‚ùå')
    );
    
    if (importantLines.length > 0) {
      importantLines.forEach(line => console.log(line));
    } else {
      console.log('‚úÖ Script ex√©cut√© avec succ√®s');
    }
  } catch (error) {
    console.error(`‚ùå Erreur lors de l'ex√©cution de ${scriptCommand}:`, error.message);
    throw error;
  }
}

async function switchMode(targetMode) {
  if (!MODES[targetMode]) {
    console.error(`‚ùå Mode "${targetMode}" non reconnu.`);
    showUsage();
    return;
  }

  const mode = MODES[targetMode];
  
  console.log(`üîÑ Basculement vers: ${mode.icon} ${mode.name}`);
  console.log(`üìù Description: ${mode.description}\n`);

  // V√©rifier l'√©tat actuel
  console.log('üîç V√©rification de l\'√©tat actuel...');
  try {
    const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);
    const { data: currentContents, error } = await supabase
      .from('contents')
      .select('id, title')
      .limit(1);

    if (error) {
      console.error('‚ö†Ô∏è Erreur lors de la v√©rification:', error.message);
    } else {
      console.log(`üìä √âtat actuel: ${currentContents.length > 0 ? 'Contenus pr√©sents' : 'Base vide'}`);
    }
  } catch (error) {
    console.log('‚ö†Ô∏è Impossible de v√©rifier l\'√©tat actuel');
  }

  // Ex√©cuter les scripts n√©cessaires
  console.log(`\nüöÄ Ex√©cution de ${mode.scripts.length} script(s)...`);
  
  for (let i = 0; i < mode.scripts.length; i++) {
    const script = mode.scripts[i];
    console.log(`\nüìã √âtape ${i + 1}/${mode.scripts.length}: ${script}`);
    
    try {
      executeScript(script);
    } catch (error) {
      console.error(`‚ùå √âchec √† l'√©tape ${i + 1}, arr√™t du processus.`);
      return;
    }
  }

  // V√©rification finale
  console.log('\nüîç V√©rification finale du statut...');
  try {
    executeScript('check-demo-status.js');
  } catch (error) {
    console.log('‚ö†Ô∏è Impossible de v√©rifier le statut final');
  }

  console.log(`\nüéâ Basculement vers "${mode.name}" termin√© !`);
  console.log(`üí° Votre plateforme est maintenant en ${mode.name.toLowerCase()}.`);
}

// R√©cup√©rer le mode depuis les arguments
const targetMode = process.argv[2];

if (!targetMode) {
  showUsage();
} else {
  switchMode(targetMode);
} 